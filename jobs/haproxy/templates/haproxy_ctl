#!/usr/bin/env bash
#
set -e

source /var/vcap/jobs/haproxy/helpers/ctl_setup.sh haproxy

NAME=haproxy
DAEMON=$(which haproxy)
CONFIG=/var/vcap/jobs/haproxy/config/haproxy.config
DESC="HAProxy"
USER=vcap
RUNCMD="${DAEMON} -f ${CONFIG} -D -p ${PID_FILE}"

test -x "${DAEMON}"
test -f "${CONFIG}"

RETVAL=0

# exec >>${LOG_DIR}/$NAME.log 2>&1

start_haproxy() {
    status_haproxy
    if [ "${RETVAL}" = 0 ]; then
        echo "$DESC is currently running"
    else
        RETVAL=0
        ensure_dirs
        inflate_certs
        echo "$("${TIMESTAMP}"): Starting $DESC"
        set +e
        # -- Add additional scripts here
        # --
        $RUNCMD 0<&-
        RETVAL=$?
        set -e
        case "${RETVAL}" in
            0)
                echo "$("${TIMESTAMP}"): Finished starting $DESC"
                echo "SUCCESS"
                ;;
            *)
                echo "$("${TIMESTAMP}"): Errored starting $DESC"
                echo "$("${TIMESTAMP}"): Errored starting $DESC" >&2
                remove_pid
                echo "FAILED - check logs"
                RETVAL=1
                ;;
        esac
    fi
}

stop_haproxy() {
    status_haproxy
    if [ "${RETVAL}" = 0 ]; then
        set +e
        for pid in $(cat "${PID_FILE}"); do
            kill ${pid} || RETVAL=$?
        done
        set -e
        if [ "${RETVAL}" = 0 ]; then
            remove_pid
        else
            echo "FAILED - check logs"
        fi
    else
        echo "$DESC not running"
    fi
}

# RETVAL = 0 if running, != 0 if stopped
status_haproxy() {
    if [ -f "${PID_FILE}" ]; then
        RETVAL=0
        set +e
        for pid in $(cat "${PID_FILE}"); do
            kill -0 "${pid}" > /dev/null 2>&1 || RETVAL=3
        done
        kill -0 $(cat "${PID_FILE}") > /dev/null 2>&1
        if [ $? != 0 ]; then
            RETVAL=3
        fi
        set -e
    else
        RETVAL=1
    fi
}

restart_haproxy() {
    stop_haproxy
    start_haproxy
}

case "$1" in
    start)
        echo -n "Starting ${DESC}: "
        start_haproxy
        echo "${NAME}."
        ;;
    stop)
        echo -n "Stopping ${DESC}: "
        stop_haproxy
        echo "${NAME}."
        ;;
    status)
        status_haproxy
        ;;
    force-reload|reload|restart)
        echo -n "Restarting ${DESC}: "
        restart_haproxy
        echo "${NAME}."
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|reload|force-reload}" >&2
        RETVAL=1
        ;;
esac

exit "${RETVAL}"
